generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  username  String  @unique
  email     String  @unique
  imageUrl  String  @db.Text
  bannerUrl String  @default("") @db.Text
  bio       String? @db.Text
  password  String  @db.Text

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  subscribed   Subscription[] @relation("Subscription")
  subscribedBy Subscription[] @relation("SubscriptionedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  broadcasts Broadcast[]
  Follow    Follow[]

  @@index([name, username])
}

model Follow {
  id           String @id @default(uuid())
  followingId  String
  followedById String

  following  User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedBy User @relation(name: "Following", fields: [followedById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@unique([followingId, followedById])
  @@index([followingId])
  @@index([followedById])
}

model Subscription {
  id               String @id @default(uuid())
  subscriptionId   String
  subscriptionById String

  subscriptioning User @relation(name: "SubscriptionedBy", fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscribedBy    User @relation(name: "Subscription", fields: [subscriptionById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isExpired Boolean @default(false)
  isActive  Boolean @default(false)

  @@unique([subscriptionId, subscriptionById])
  @@index([subscriptionId])
  @@index([subscriptionById])
}

model Broadcast {
  id         String  @id @default(uuid())
  url        String
  isComplete Boolean @default(false)

  userId   String
  streamId String

  user   User   @relation(fields: [userId], references: [id])
  stream Stream @relation(fields: [streamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Block {
  id          String @id @default(uuid())
  blockingId  String
  blockedById String

  blocking  User @relation(name: "BlockedBy", fields: [blockingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockedBy User @relation(name: "Blocking", fields: [blockedById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockingId, blockedById])
  @@index([blockingId])
  @@index([blockedById])
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive               Boolean @default(false)
  isChatEnabled        Boolean @default(true)
  isChatDelayed        Boolean @default(false)
  isChatFollowersOnly  Boolean @default(false)
  isChatSubscriberOnly Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  broadcasts Broadcast[]

  @@index([userId])
  @@index([ingressId])
  @@index([name])
}
